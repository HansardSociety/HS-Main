/*		=Core BG colors
  ========================================================================== */

@each $name, $color in Merge(
  map-get($colors, primary),
  map-get($colors, secondary),
  map-get($colors, greyscale)) {

  // Colors
  .e-col-#{ $name },
  %e-col-#{ $name } {
    color: $color;
  }

  // Background colors
  .e-bgc-#{ $name },
  %e-bgc-#{ $name } {
    background-color: $color;
  }
}

@each $colorName, $colorShades in $colorGroups {
  @each $shadeNum, $shadeHex in $colorShades {

    %e-col-#{ $colorName }-#{ $shadeNum },
    .e-col-#{ $colorName }-#{ $shadeNum } {
      color: $shadeHex;
    }

    %e-bgc-#{ $colorName }-#{ $shadeNum },
    .e-bgc-#{ $colorName }-#{ $shadeNum } {
      background-color: $shadeHex;
    }
  }
}

/*		=BG shapes
  ========================================================================== */

.e-bg-shapes {
  $color: Get($colorGroups, brand-green, 2);
  $op1: .075;
  $op2: .001;

  background-color: rgba($color, $op1);

  background-image:
    linear-gradient(45deg, rgba($color, $op1) 0%, rgba($color, $op1) 60%, transparent 60%),
    linear-gradient(140deg, rgba($color, $op1) 0%, rgba($color, $op1) 40%, transparent 40%);

  @include above(md) {
    background-image:
      linear-gradient(26deg, rgba($color, $op1) 0%, rgba($color, $op1) 60%, transparent 60%),
      linear-gradient(-30deg, rgba($color, $op1) 0%, rgba($color, $op1) 40%, transparent 40%),
      linear-gradient(-60deg, rgba($color, $op1) 0%, rgba($color, $op1) 60%, transparent 60%);
  }
}

/*		=BG gradients
  ========================================================================== */

@each $colorName, $colorShades in $colorGroups {

  $color1: map-get($colorShades, 1);
  $color2: map-get($colorShades, 2);

  .e-bg-grad-#{ $colorName } {
    background: $color2;
    background: radial-gradient(ellipse at center 100%, $color1 30%, $color2 100%);
  }
}
